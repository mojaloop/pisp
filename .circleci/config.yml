# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
###
orbs:
  anchore: anchore/anchore-engine@1.6.0
  slack: circleci/slack@3.4.2

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk --no-cache add bash
    apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
    npm config set unsafe-perm true
    npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add \
            python \
            py-pip \
            groff \
            less \
            mailcap
    pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic
    apk -v --purge del py-pip

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project
    docker: 
      - image: node:12.16.0-alpine

  default-machine:
    machine:
      image: ubuntu-1604:201903-01

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - checkout
      # TODO: activate if there is a need - 
      # we're not installing much from npm so it might not be worth messing with the cache
      # - run:
      #     name: Install general dependencies
      #     command: *defaults_Dependencies
      # - run:
      #     name: Access npm folder as root
      #     command: cd $(npm root -g)/npm
      # - run:
      #     name: Update NPM install
      #     command: npm install
      # - run:
      #     name: Delete build dependencies
      #     command: apk del build-dependencies
      # - save_cache:
      #     key: dependency-cache-{{ checksum "package.json" }}
      #     paths:
      #       - node_modules

  test-e2e:
    executor: default-machine
    steps:
      - checkout
      # TODO: set up /etc/hosts!
      - run:
          name: Add /etc/hosts entries
          command: |
            sudo ./scripts/_setup_hosts_file.sh
      - run:
          name: Set up nvm
          command: |
            echo ${NVM_DIR}
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v12.16.1
            nvm alias default v12.16.1
      - run: 
          name: install modules
          command: |
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            node --version
            npm install
      - run:
          name: Spin up the E2E test environment
          command: |
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ./docker-local/
            docker-compose pull 

            # Hacky workarounds for some startup failures
            docker-compose up -d mysql-als
            docker-compose up -d account-lookup-service
            docker-compose up -d
            npm run wait-4-docker

            docker-compose stop && docker-compose up -d
            npm run wait-4-docker

            npm run reseed
      - run: 
          name: Run the E2E tests
          command: |
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm run test:e2e

      # - slack/status:
      #   fail_only: true
      #   webhook: "$SLACK_WEBHOOK_ANNOUNCMENT_CI_CD"
      #   failure_message: 'E2E Tests failed for: \`"${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"\`'


##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            # TODO re-gnore when we're done with this setup
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-e2e:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      # - test-contract:
      #     context: org-global
      #     requires:
      #       - setup
      #     filters:
      #       tags:
      #         only: /.*/
      #       branches:
      #         ignore:
      #           - /feature*/
      #           - /bugfix*/
  