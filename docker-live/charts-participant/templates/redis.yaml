{{- $participantId := .Values.participantId }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $participantId }}-redis
  labels:
    app: {{ $participantId }}-redis
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1 # exeed the replicas by 1 pod
  selector:
    matchLabels:
      app: {{ $participantId }}-redis
  template:
    metadata:
      labels:
        app: {{ $participantId }}-redis
    spec:
      containers:
        - name: redis
          image: redis:5.0.4-alpine
          # livenessProbe:
          #   initialDelaySeconds: 30
          #   httpGet:
          #     path: /
          #     port: 4000
          # readinessProbe:
          #   initialDelaySeconds: 30
          #   httpGet:
          #     path: /
          #     port: 4000
        # env:
        #   - name: ALS_SWITCH_ENDPOINT
        #     value: http://centralledger:3001
        #   - name: ALS_DATABASE__HOST
        #     value: mysql-als

      # TODO: env file
      # volumes:
      # - "./dfsp_a/secrets:/secrets"
      # - "./dfsp_a/jwsVerificationKeys:/jwsVerificationKeys"
      # TODO: rules file
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $participantId }}-redis
spec:
  ports:
    - port: 6379
  selector:
    app: {{ $participantId }}-redis
  clusterIP: None
# ---

# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: {{ $participantId }}-redis
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /$2
#     nginx.ingress.kubernetes.io/use-regex: "true"
# spec:
#   rules:
#     - http:
#         paths:
#           - path: /{{ $participantId }}/sdk-scheme-adapter/inbound(/|$)(.*)
#             backend:
#               serviceName: {{ $participantId }}-sdk-scheme-adapter
#               servicePort: 4000
#           - path: /{{ $participantId }}/sdk-scheme-adapter/outbound(/|$)(.*)
#             backend:
#               serviceName: {{ $participantId }}-sdk-scheme-adapter
#               servicePort: 4001
