@startuml

!pragma teoz true

title PISP Linking: Credential registration (verification)

participant "PISP" as PISP

box "Mojaloop"
    participant "Thirdparty-API-Adapter" as Switch
    participant "Account Lookup Service" as ALS
    participant "Auth Service" as Auth
end box

participant "DFSP" as DFSP

autonumber 10 "<b>CRED-#</b>"

...

note over PISP, DFSP
    The PISP uses the FIDO registration flow to generate a new keypair and sign the challenge, relying on the user performing an "unlock action" on their mobile device.
end note

...

PISP -> Switch ++: ""PUT /consents/123""\n\
""  FSIOP-Source: pispa""\n\
""  FSPIOP-Destination: dfspa""\n\
""  {""\n\
    ""  scopes: [""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.1234",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""    },""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.5678",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""    }""\n\
    ""  ],""\n\
    ""**  credential: {// This is new!**""\n\
    ""    credentialType: "FIDO",""\n\
    ""    status: "PENDING",""\n\
    ""    payload: PublicKeyCredential ""\n\
    ""  }""\n\
""  }""
Switch --> PISP: ""202 Accepted""
deactivate PISP


Switch -> DFSP ++: ""PUT /consents/123""\n\
""  FSIOP-Source: pispa""\n\
""  FSPIOP-Destination: dfspa""

DFSP --> Switch: ""202 Accepted""


rnote over DFSP
  1. DFSP checks the signed challenge against the derived challenge from the scopes

  If the DFSP opts to use the hub-hosted Auth-Service it then:
  1. Registers the consent with the Auth Service ""POST /consents""
  2. If the DFSP recieves a  `PUT /consents/{id}` and the callback contains ""Consent.credential.status"" of ""VERIFIED"",
      for each scope in the Consent, the DFSP creates a ""CredentialScope""
      else, if it recieves a `PUT /consents/{id}/error` callback, it knows that the Consent is invalid, and can propagate the error back to the PISP

end note


DFSP -> Switch: ""POST /consents"" \n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: central-auth""\n\
""  {""\n\
    ""  consentId: "123"""\n\
    ""  scopes: [""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.1234",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""      }""\n\
    ""    },""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.5678",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""      }""\n\
    ""    },""\n\
    ""  ],""\n\
    ""  credential: {""\n\
    ""    credentialId: "9876", //keyHandleId in FIDO speak ""\n\
    ""    credentialType: "FIDO",""\n\
    ""    **status: "PENDING", //this is new!** ""\n\
    ""    signature: base64(...),""\n\
    ""    payload: base64(...),""\n\
    ' Q3. Need to define this metadata better
    ""    metadata: ... //TODO - metadata that the DFSP can use to verify this signature""\n\
    ""  }""\n\
""  }""

Switch --> DFSP: "202 Accepted"


Switch -> Auth: ""POST /consents"" \n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: central-auth""

Auth --> Switch: "202 Accepted"


rnote over Auth
  The Auth Service checks the signature against the challenge,
  and if provided, the metadata field to prove the authenticity
  of the key.
end note


Auth -> Switch: ""PUT /consents/123"" \n\
""  FSIOP-Source: central-auth""\n\
""  FSPIOP-Destination: dfspa""\n\
""  {""\n\
    ""  consentId: "123"""\n\
    ""  scopes: [""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.1234",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""    },""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.5678",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""    },""\n\
    ""  ],""\n\
    ""  credential: {""\n\
    ""    credentialId: "9876", //keyHandleId in FIDO speak ""\n\
    ""    credentialType: "FIDO",""\n\
    ""    **status: "VERIFIED", //this is new!** ""\n\
    ""    signature: base64(...),""\n\
    ""    payload: base64(...),""\n\
    ' Q3. Need to define this metadata better
    ""    metadata: ... //TODO - metadata that the DFSP can use to verify this signature""\n\
    ""  }""\n\
""  }""

Switch --> Auth: "200 OK"

Switch -> DFSP: ""PUT /consents/123"" \n\
""  FSIOP-Source: central-auth""\n\
""  FSPIOP-Destination: dfspa""

DFSP --> Switch: "200 OK"

rnote over DFSP
  DFSP is now satisfied that the Consent registered by the PISP is valid,
  and now proceeds to register with the ALS:
    - `THIRD_PARTY_LINK` (optional - for routing of funds to a Third Party Link)
    - `Consent` - to allow for `GET /consent/{ID}` calls etc. Will point to the fspId of the Auth Service responsible for the Consent
  ALS
end note

@enduml
