@startuml

!pragma teoz true

title PISP Linking: Credential registration (verification)

participant "PISP" as PISP

box "Mojaloop"
    participant "Thirdparty-API-Adapter" as Switch
    participant "Account Lookup Service" as ALS
    participant "Auth Service" as Auth
end box

participant "DFSP" as DFSP

autonumber 10 "<b>CRED-#</b>"

...

note over PISP, DFSP
    The PISP uses the FIDO registration flow to generate a new keypair and sign the challenge, relying on the user performing an "unlock action" on their mobile device.
end note

...

PISP -> Switch ++: ""PUT /consents/123""\n\
""  FSIOP-Source: pispa""\n\
""  FSPIOP-Destination: dfspa""\n\
""  {""\n\
    ""  scopes: [""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.1234",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""    },""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.5678",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""    }""\n\
    ""  ],""\n\
    ""**  credential: {// This is new!**""\n\
    ""    credentialId: "9876", //keyHandleId in FIDO speak ""\n\
    ""    credentialType: "FIDO",""\n\
    ""    status: "PENDING",""\n\
    ""    **signature: base64(...), // The signed challenge**""\n\
    ""    **payload: base64(...), // public key!**""\n\
    ' Q3. Need to define this metadata better
    ""    **metadata: ... //TODO - metadata that the DFSP can use to verify this signature**""\n\
    ""  }""\n\
""  }""
Switch --> PISP: ""202 Accepted""
deactivate PISP


Switch -> DFSP ++: ""PUT /consents/123""\n\
""  FSIOP-Source: pispa""\n\
""  FSPIOP-Destination: dfspa""\n\
""  {""\n\
    ""  scopes: [""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.1234",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""    },""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.5678",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""    }""\n\
    ""  ],""\n\
    ""**  credential: {// This is new!**""\n\
    ""    credentialId: "9876", //keyHandleId in FIDO speak ""\n\
    ""    credentialType: "FIDO",""\n\
    ""    status: "PENDING",""\n\
    ""    **signature: base64(...), // The signed challenge**""\n\
    ""    **payload: base64(...), // public key!**""\n\
    ' Q3. Need to define this metadata better
    ""    **metadata: ... //TODO - metadata that the DFSP can use to verify this signature**""\n\
    ""  }""\n\
""  }""
DFSP --> Switch: ""202 Accepted""


rnote over DFSP
  DFSP checks :
  1. The challenge payload(s) were correctly derived from the scopes.accountId + scopes.action

  It then:
  2. Registers the Credential with the Auth Service ""POST /credentials""
  3. If the `PUT /credentials/{id}` callback contains ""credential#status"" of ""VERIFIED"",
      for each scope in the Consent, the DFSP creates a ""CredentialScope""

end note


DFSP -> Switch: ""POST /credentials"" \n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: central-auth""\n\
"" { ""\n\
""  challenge: "base64(...)" //The challenge derived from scopes"",\n\
""  credentialId: "9876", //keyHandleId in FIDO speak ""\n\
""  credentialType: "FIDO",""\n\
""  status: "PENDING",""\n\
""  **signature: base64(...), // The signed challenge**""\n\
""  **payload: base64(...), // public key!**""\n\
' Q3. Need to define this metadata better
""  **metadata: ... //TODO - metadata that the DFSP can use to verify this signature**""\n\
""}""

Switch --> DFSP: "202 Accepted"


Switch -> Auth: ""POST /credentials"" \n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: central-auth""\n\
"" { ""\n\
""  challenge: "base64(...)" //The challenge derived from scopes"",\n\
""  credentialId: "9876", //keyHandleId in FIDO speak ""\n\
""  credentialType: "FIDO",""\n\
""  status: "PENDING",""\n\
""  **signature: base64(...), // The signed challenge**""\n\
""  **payload: base64(...), // public key!**""\n\
' Q3. Need to define this metadata better
""  **metadata: ... //TODO - metadata that the DFSP can use to verify this signature**""\n\
""}""

Auth --> Switch: "202 Accepted"

rnote over Auth
  The Auth Service checks the signature against the challenge,
  and if provided, the metadata field to prove the authenticity
  of the key.
end note


DFSP -> Switch: ""POST /credentials"" \n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: central-auth""\n\
"" { ""\n\
""  challenge: "base64(...)" //The challenge derived from scopes"",\n\
""  credentialId: "9876", //keyHandleId in FIDO speak ""\n\
""  credentialType: "FIDO",""\n\
""  status: "PENDING",""\n\
""  **signature: base64(...), // The signed challenge**""\n\
""  **payload: base64(...), // public key!**""\n\
' Q3. Need to define this metadata better
""  **metadata: ... //TODO - metadata that the DFSP can use to verify this signature**""\n\
""}""

Switch --> DFSP: "202 Accepted"


Auth -> Switch: ""PUT /credentials/9876"" \n\
""  FSIOP-Source: central-auth""\n\
""  FSPIOP-Destination: dfspa""\n\
"" { ""\n\
""  status: "VERIFIED",""\n\
""}""

Switch --> Auth: "200 OK"

Switch -> DFSP: ""PUT /credentials/9876"" \n\
""  FSIOP-Source: central-auth""\n\
""  FSPIOP-Destination: dfspa""\n\
"" { ""\n\
""  status: "VERIFIED",""\n\
""}""

DFSP --> Switch: "200 OK"

rnote over DFSP
  DFSP is now satisfied that the credential registered by the PISP is valid,
  and now proceeds to register "THIRD_PARTY_LINK"s with the Auth Service and
  ALS
end note

loop for each scope in ""Consents.scopes""

DFSP -> Switch: ""POST /scopes/THIRD_PARTY_LINK/qwerty-56789"" \n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: central-auth""\n\
""  {""\n\
""    credentialId: "9876"""\n\
""  }""

Switch --> DFSP: ""202 Accepted""

Switch -> Auth: ""POST /scopes/THIRD_PARTY_LINK/qwerty-56789"" \n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: central-auth""\n\
""  {""\n\
""    credentialId: "9876"""\n\
""  }""

Auth --> Switch: ""202 Accepted""


Auth -> Switch: ""PUT /scopes/THIRD_PARTY_LINK/qwerty-56789"" \n\
""  FSIOP-Source: central-auth""\n\
""  FSPIOP-Destination: dfspa""\n\
""  {""\n\
""    credentialId: "9876"""\n\
""  }""

Switch --> Auth: ""200 OK""
Switch -> DFSP: ""PUT /scopes/THIRD_PARTY_LINK/qwerty-56789"" \n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: central-auth""\n\
""  {""\n\
""    credentialId: "9876"""\n\
""  }""

DFSP --> Switch: ""200 OK""

DFSP -> ALS: ""POST /participants/THIRD_PARTY_LINK/qwerty-56789"" \n\
""  FSIOP-Source: dfspa""\n\
""  {""\n\
""    fspId: "dfspa",""\n\
""  }""
ALS --> DFSP: ""202 Accepted""

rnote over ALS #DimGray
  ALS registers a new entry in the THIRD_PARTY_LINK oracle
end note

ALS -> DFSP: ""PUT /participants/THIRD_PARTY_LINK/qwerty-56789"" \n\
""  FSIOP-Source: account-lookup-service""\n\
""  FSIOP-Destination: dfspa""\n\
""  {""\n\
""    fspId: "dfspa",""\n\
""  }""
DFSP --> ALS: ""200 OK""

end

rnote over DFSP
  Now that the Credentials are verified and registered with the Auth Service,
  the DFSP can update the PISP with the final status
end note

DFSP -> Switch: ""PUT /consents/123""\n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: pispa""\n\
""  {""\n\
    ""  scopes: [""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.1234",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""      **partyIdInfo: { //this is new!** ""\n\
    ""        partyIdType: "THIRD_PARTY_LINK",""\n\
    ""        partyIdentifier: "qwerty-1234",""\n\
    ""      }""\n\
    ""    },""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.5678",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""      **partyIdInfo: { //this is new!** ""\n\
    ""        partyIdType: "THIRD_PARTY_LINK",""\n\
    ""        partyIdentifier: "qwerty-5678",""\n\
    ""      }""\n\
    ""    },""\n\
    ""  ],""\n\
    ""  credential: {""\n\
    ""    credentialId: "9876", //keyHandleId in FIDO speak ""\n\
    ""    credentialType: "FIDO",""\n\
    ""    **status: "VERIFIED", //this is new!** ""\n\
    ""    signature: base64(...),""\n\
    ""    payload: base64(...),""\n\
    ' Q3. Need to define this metadata better
    ""    metadata: ... //TODO - metadata that the DFSP can use to verify this signature""\n\
    ""  }""\n\
""  }""
DFSP --> Switch: ""200 OK""

Switch -> PISP ++: ""PUT /consents/123""\n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: pispa""\n\
""  {""\n\
    ""  scopes: [""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.1234",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""      **partyIdInfo: { //this is new!** ""\n\
    ""        partyIdType: "THIRD_PARTY_LINK",""\n\
    ""        partyIdentifier: "qwerty-1234",""\n\
    ""      }""\n\
    ""    },""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.5678",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],""\n\
    ""      **partyIdInfo: { //this is new!** ""\n\
    ""        partyIdType: "THIRD_PARTY_LINK",""\n\
    ""        partyIdentifier: "qwerty-5678",""\n\
    ""      }""\n\
    ""    },""\n\
    ""  ],""\n\
    ""  credential: {""\n\
    ""    credentialId: "9876", //keyHandleId in FIDO speak ""\n\
    ""    credentialType: "FIDO",""\n\
    ""    **status: "VERIFIED", //this is new!** ""\n\
    ""    signature: base64(...),""\n\
    ""    payload: base64(...),""\n\
    ' Q3. Need to define this metadata better
    ""    metadata: ... //TODO - metadata that the DFSP can use to verify this signature""\n\
    ""  }""\n\
""  }""
PISP --> Switch: ""200 OK""


note over PISP, DFSP
  Now we have a new identifier that the PISP can use to initiate transactions, a registered credential, and that credential is stored in the auth-service
end note


@enduml
