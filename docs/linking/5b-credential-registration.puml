@startuml

!pragma teoz true

title PISP Linking: Credential registration (verification)

participant "PISP" as PISP

box "Mojaloop"
    participant "Thirdparty-API-Adapter" as Switch
    participant "Account Lookup Service" as ALS
    participant "Auth Service" as Auth
end box

participant "DFSP" as DFSP

autonumber 10 "<b>CRED-#</b>"

...

note over PISP, DFSP
    The PISP uses the FIDO registration flow to generate a new keypair and sign the challenge, relying on the user performing an "unlock action" on their mobile device.
end note

...

PISP -> Switch ++: ""PUT /consents/123""\n\
""  FSIOP-Source: pispa""\n\
""  FSPIOP-Destination: dfsapa""\n"
""  {""\n\
    ""  scopes: [ ""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.1234",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],
    ""      credential: {
    ""      **credentialId: "9876", // This is new!**""\n\
    ""        credentialType: "FIDO",""\n\
    ""        status: "PENDING",""\n\
    ""        challenge: {""\n\
    ""          payload: base64(...),""\n\
    ""        **signature: base64(...), // This is new!**""\n\
    ""        },""\n
    ""      **payload: base64(...), // This is new!**""\n\
    ""      **metadata: ... //TODO - metadata that the DFSP can use to verify this signature**""\n\
    ""     }""\n\ 
    ""    },""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.5678",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],
    ""      credential: {
    ""      **credentialId: "9876", // This is new!**""\n\
    ""        credentialType: "FIDO",""\n\
    ""        status: "PENDING",""\n\
    ""        challenge: {""\n\
    ""          payload: base64(...),""\n\
    ""        **signature: base64(...), // This is new!**""\n\
    ""        },""\n
    ""      **payload: base64(...), // This is new!**""\n\
    ""      **metadata: ... //TODO - metadata that the DFSP can use to verify this signature**""\n\
    ""     }""\n\ 
    ""    },""\n\
    ""  ],""\n\
    ""  credential: {""\n\
    ""  }""\n\
    ""}""
Switch --> PISP: ""202 Accepted""
deactivate PISP


Switch -> DFSP ++: ""PUT /consents/123""\n"
DFSP --> Switch: ""202 Accepted""


' TODO: DFSP checks the signing of the challenge, and authenticity of credentials
' or asks the Auth Service to do it on it's behalf

DFSP -> Switch: ""POST /validations""
Switch --> DFSP: ""202 Accepted""

Switch -> Auth: ""POST /validations""
Auth --> Switch: ""202 Accepted""


' TODO: Auth service validates the credentials along with with the FIDO metadata

Auth -> Switch: ""PUT /validations/<type>/<ID>""
Switch --> Auth: ""200 OK""

Switch -> DFSP: ""PUT /validations/<type>/<ID>""
DFSP --> Switch: ""200 OK""

' TODO: at this point, the credential is registered, and the DFSP must update the PISP with the details to be used

' TODO: I think this is where the DFSP should (optionally) inform the ALS oracle about the link

DFSP -> Switch ++: ""PUT /consents/123""\n\
""  FSIOP-Source: dfspa""\n\
""  FSPIOP-Destination: pispapa""\n"
""  {""\n\
    ""  scopes: [ ""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.1234",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],
    ""      credential: {
    ""      **credentialId: "9876", // This is new!**""\n\
    ""        credentialType: "FIDO",""\n\
    ""        status: "COMPLETED",""\n\
    ""        challenge: {""\n\
    ""          payload: base64(...),""\n\
    ""        **signature: base64(...), // This is new!**""\n\
    ""        },""\n
    ""      **payload: base64(...), // This is new!**""\n\
    ""      **metadata: ... //TODO - metadata that the DFSP can use to verify this signature**""\n\
            }
            partyIdInfo: { //this is new!
              partyIdType: "THIRD_PARTY_LINK",
              partyIdentifier: "qwerty-12345",
            }
    ""    }""\n\
    ""    },""\n\
    ""    {""\n\
    ""      accountId: "dfsp.username.5678",""\n\
    ""      actions: [ "accounts.transfer", "accounts.getBalance" ],
    ""      credential: {
    ""      **credentialId: "9876", // This is new!**""\n\
    ""        credentialType: "FIDO",""\n\
    ""        status: "COMPLETED",""\n\
    ""        challenge: {""\n\
    ""          payload: base64(...),""\n\
    ""        **signature: base64(...), // This is new!**""\n\
    ""        },""\n
    ""      **payload: base64(...), // This is new!**""\n\
    ""      **metadata: ... //TODO - metadata that the DFSP can use to verify this signature**""\n\
            }
            partyIdInfo: { //this is new!
              partyIdType: "THIRD_PARTY_LINK",
              partyIdentifier: "qwerty-56789",
            }
    ""     }""\n\ 
    ""    },""\n\
    ""  ],""\n\
    ""  credential: {""\n\
    ""  }""\n\
    ""}""
Switch --> DFSP: ""200 Accepted""
deactivate DFSP


Switch -> PISP: ""PUT /consents/123""\n\
PISP --> Switch: ""200 Accepted""


' now we have a new identifier that the PISP can use to initiate transactions, a registered credential, and that credential is stored in the auth-service

@enduml
