openapi: 3.0.2
info:
  title: Auth Service API
  version: '1.0'
  description: TBD
  license:
    name: TBD
    url: TBD
servers:
  - url: /
paths:
  /consents:
    post:
      tags:
        - consents
        - sampled
      operationId: PostConsents
      summary: PostConsents
      description: |
        DFSP sends this request to the PISP after granting consent. DFSP sends this request to an Auth service to validate a signed consent.
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          description: The `Accept` header field indicates the version of the API the client would like the server to use.
        - $ref: '#/paths/~1thirdpartyRequests~1verifications/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentPostRequestAUTH
                  type: object
                  description: |
                    The object sent in a `POST /consents` request to AUTH-SERVICE by DFSP to store registered consent with PublicKey
                    and whatever needed to perform authorization validation later
                  properties:
                    consentId:
                      allOf:
                        - $ref: '#/paths/~1thirdpartyRequests~1verifications/post/requestBody/content/application~1json/schema/properties/consentId/allOf/0'
                      description: |
                        Common ID between the PISP and FSP for the Consent object
                        decided by the DFSP who creates the Consent
                        This field is REQUIRED for POST /consent.
                        creation of this Consent.
                    scopes:
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: Scope + Account Identifier mapping for a Consent.
                        example: |
                          {
                            accountId: "dfsp.username.5678",
                            actions: [ "accounts.transfer", "accounts.getBalance" ]
                          }
                        properties:
                          accountId:
                            title: AccountId
                            type: string
                            description: |
                              A long-lived unique account identifier provided by the DFSP. This MUST NOT
                              be Bank Account Number or anything that may expose a User's private bank
                              account information.
                            pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                            minLength: 1
                            maxLength: 1023
                          actions:
                            type: array
                            items:
                              title: ConsentScopeType
                              type: string
                              enum:
                                - accounts.getBalance
                                - accounts.transfer
                              description: |
                                The scopes requested for a ConsentRequest.
                                - "accounts.getBalance" - Get the balance of a given account.
                                - "accounts.transfer" - Initiate a transfer from an account.
                        required:
                          - accountId
                          - actions
                    credential:
                      allOf:
                        - $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential'
                  required:
                    - consentId
                    - scopes
                    - credential
                  additionalProperties: false
                - title: ConsentPostRequestPISP
                  type: object
                  description: The object sent in a `POST /consents` request to PISP by DFSP to ask for delivering the credential object.
                  properties:
                    consentId:
                      allOf:
                        - $ref: '#/paths/~1thirdpartyRequests~1verifications/post/requestBody/content/application~1json/schema/properties/consentId/allOf/0'
                      description: |
                        Common ID between the PISP and FSP for the Consent object
                        decided by the DFSP who creates the Consent
                        This field is REQUIRED for POST /consent.
                    consentRequestId:
                      allOf:
                        - $ref: '#/paths/~1thirdpartyRequests~1verifications/post/requestBody/content/application~1json/schema/properties/consentId/allOf/0'
                      description: |
                        The id of the ConsentRequest that was used to initiate the
                        creation of this Consent.
                    scopes:
                      type: array
                      items:
                        $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/oneOf/0/properties/scopes/items'
                  required:
                    - consentId
                    - scopes
                    - consentRequestId
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
                properties:
                  errorInformation:
                    $ref: '#/paths/~1consents~1%7BID%7D~1error/put/requestBody/content/application~1json/schema/properties/errorInformation'
          headers:
            Content-Length:
              required: false
              schema:
                type: integer
              description: |-
                The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.

                **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
            Content-Type:
              schema:
                type: string
              required: true
              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
  '/consents/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
        description: The identifier value.
      - name: Content-Type
        in: header
        schema:
          type: string
        required: true
        description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
      - name: Date
        in: header
        schema:
          type: string
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema:
          type: string
        required: false
        description: |-
          The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.

          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema:
          type: string
        required: true
        description: The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema:
          type: string
        required: false
        description: 'The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty.'
      - name: FSPIOP-Encryption
        in: header
        schema:
          type: string
        required: false
        description: The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema:
          type: string
        required: false
        description: The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema:
          type: string
        required: false
        description: 'The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).'
      - name: FSPIOP-HTTP-Method
        in: header
        schema:
          type: string
        required: false
        description: 'The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).'
    get:
      description: |
        The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier. The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`. summary: GetConsent
      tags:
        - consents
      operationId: GetConsent
      summary: GetConsent
      parameters:
        - $ref: '#/paths/~1consents/post/parameters/0'
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    patch:
      description: |
        The HTTP request `PATCH /consents/{ID}` is used

        - In account linking in the Credential Registration phase. Used by a DFSP
          to notify a PISP a credential has been verified and registered with an
          Auth service.

        - In account unlinking by a hub hosted auth service and by DFSPs
          in non-hub hosted scenarios to notify participants of a consent being revoked.

          Called by a `auth-service` to notify a PISP and DFSP of consent status in hub hosted scenario.
          Called by a `DFSP` to notify a PISP of consent status in non-hub hosted scenario.
      tags:
        - consents
        - sampled
      operationId: PatchConsentByID
      summary: PatchConsentByID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentsIDPatchResponseVerified
                  description: |
                    PATCH /consents/{ID} request object.

                    Sent by the DFSP to the PISP when a consent is verified.
                    Used in the "Register Credential" part of the Account linking flow.
                  type: object
                  properties:
                    credential:
                      type: object
                      properties:
                        status:
                          title: ConsentStatusType
                          type: string
                          enum:
                            - VERIFIED
                          description: |
                            The status of the Consent.
                            - "VERIFIED" - The Consent is valid and verified.
                      required:
                        - status
                  required:
                    - credential
                - title: ConsentsIDPatchResponseRevoked
                  description: |
                    PATCH /consents/{ID} request object.

                    Sent to both the PISP and DFSP when a consent is revoked.
                    Used in the "Unlinking" part of the Account Unlinking flow.
                  type: object
                  properties:
                    status:
                      title: ConsentStatusType
                      type: string
                      enum:
                        - REVOKED
                      description: |
                        The status of the Consent.
                        - "REVOKED" - The Consent is no longer valid and has been revoked.
                    revokedAt:
                      title: DateTime
                      type: string
                      pattern: '^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$'
                      description: 'The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).'
                      example: '2016-05-24T08:38:08.699-04:00'
                  required:
                    - status
                    - revokedAt
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1verifications/parameters/1'
      responses:
        '200':
          $ref: '#/paths/~1consents~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    put:
      description: |
        The HTTP request `PUT /consents/{ID}` is used by the PISP and Auth Service.

        - Called by a `PISP` to after signing a challenge. Sent to an DFSP for verification.
        - Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.
      tags:
        - consents
        - sampled
      operationId: PutConsentByID
      summary: PutConsentByID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentsIDPutResponseSigned
                  type: object
                  description: |
                    The HTTP request `PUT /consents/{ID}` is used by the PISP to update a Consent with a signed challenge and register a credential.
                    Called by a `PISP` to after signing a challenge. Sent to a DFSP for verification.
                  properties:
                    scopes:
                      type: array
                      items:
                        $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/oneOf/0/properties/scopes/items'
                    credential:
                      title: SignedCredential
                      type: object
                      description: |
                        A credential used to allow a user to prove their identity and access
                        to an account with a DFSP.

                        SignedCredential is a special formatting of the credential to allow us to be
                        more explicit about the `status` field - it should only ever be PENDING when
                        updating a credential.
                      properties:
                        credentialType:
                          title: CredentialType
                          type: string
                          enum:
                            - FIDO
                          description: |
                            The type of the Credential.
                            - "FIDO" - A FIDO public/private keypair
                        status:
                          type: string
                          enum:
                            - PENDING
                          description: The challenge has signed but not yet verified.
                        payload:
                          title: FIDOPublicKeyCredential
                          type: object
                          description: |
                            An object sent in a `PUT /consents/{ID}` request.
                            Based on https://w3c.github.io/webauthn/#iface-pkcredential
                            and mostly on: https://webauthn.guide/#registration
                            AuthenticatorAttestationResponse
                            https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-attestationobject
                          properties:
                            id:
                              type: string
                              description: |
                                credential id: identifier of pair of keys, base64 encoded
                                https://w3c.github.io/webauthn/#ref-for-dom-credential-id
                              minLength: 59
                              maxLength: 118
                            rawId:
                              type: string
                              description: |
                                raw credential id: identifier of pair of keys, base64 encoded
                              minLength: 59
                              maxLength: 118
                            response:
                              type: object
                              description: |
                                AuthenticatorAttestationResponse
                              properties:
                                clientDataJSON:
                                  type: string
                                  description: |
                                    JSON string with client data
                                  minLength: 121
                                  maxLength: 512
                                attestationObject:
                                  type: string
                                  description: |
                                    CBOR.encoded attestation object
                                  minLength: 306
                                  maxLength: 2048
                              required:
                                - clientDataJSON
                                - attestationObject
                              additionalProperties: false
                            type:
                              type: string
                              description: 'response type, we need only the type of public-key'
                              enum:
                                - public-key
                          required:
                            - id
                            - rawId
                            - response
                            - type
                          additionalProperties: false
                      required:
                        - credentialType
                        - status
                        - payload
                      additionalProperties: false
                  required:
                    - scopes
                    - credential
                  additionalProperties: false
                - title: ConsentsIDPutResponseVerified
                  type: object
                  description: |
                    The HTTP request `PUT /consents/{ID}` is used by the DFSP or Auth-Service to update a Consent object once it has been Verified.
                    Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.
                  properties:
                    scopes:
                      type: array
                      items:
                        $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/oneOf/0/properties/scopes/items'
                    credential:
                      title: VerifiedCredential
                      type: object
                      description: |
                        A credential used to allow a user to prove their identity and access
                        to an account with a DFSP.

                        VerifiedCredential is a special formatting of the credential to allow us to be
                        more explicit about the `status` field - it should only ever be VERIFIED when
                        updating a credential.
                      properties:
                        credentialType:
                          $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential/properties/credentialType'
                        status:
                          type: string
                          enum:
                            - VERIFIED
                          description: 'The Credential is valid, and ready to be used by the PISP.'
                        payload:
                          $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential/properties/payload'
                      required:
                        - credentialType
                        - status
                        - payload
                      additionalProperties: false
                  required:
                    - scopes
                    - credential
                  additionalProperties: false
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1verifications/parameters/1'
      responses:
        '200':
          description: OK
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    delete:
      description: |
        The HTTP request `DELETE /consents/{ID}` is used to mark as deleted a previously created consent.

        - Called by a PISP when a user wants to remove their consent.
      operationId: DeleteConsentByID
      tags:
        - consents
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/consents/{ID}/error':
    put:
      tags:
        - consents
      operationId: NotifyErrorConsents
      summary: NotifyErrorConsents
      description: |
        DFSP responds to the PISP if something went wrong with validating or storing consent.
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1thirdpartyRequests~1verifications/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: Data model for the complex type object that contains ErrorInformation.
              properties:
                errorInformation:
                  title: ErrorInformation
                  type: object
                  description: Data model for the complex type ErrorInformation.
                  properties:
                    errorCode:
                      title: ErrorCode
                      type: string
                      pattern: '^[1-9]\d{3}$'
                      description: 'The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.'
                      example: '5100'
                    errorDescription:
                      title: ErrorDescription
                      type: string
                      minLength: 1
                      maxLength: 128
                      description: Error description string.
                    extensionList:
                      $ref: '#/paths/~1participants~1%7BType%7D~1%7BID%7D/post/requestBody/content/application~1json/schema/properties/extensionList'
                  required:
                    - errorCode
                    - errorDescription
              required:
                - errorInformation
      responses:
        '200':
          $ref: '#/paths/~1consents~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/participants/{Type}/{ID}':
    parameters:
      - name: Type
        in: path
        required: true
        schema:
          type: string
        description: 'The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`.'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
    post:
      description: 'The HTTP request `POST /participants/{Type}/{ID}` (or `POST /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`). An ExtensionList element has been added to this reqeust in version v1.1'
      summary: Create participant information
      tags:
        - participants
      operationId: ParticipantsByIDAndType
      parameters:
        - $ref: '#/paths/~1consents/post/parameters/0'
        - $ref: '#/paths/~1thirdpartyRequests~1verifications/parameters/1'
      requestBody:
        description: Participant information to be created.
        required: true
        content:
          application/json:
            schema:
              title: ParticipantsTypeIDSubIDPostRequest
              type: object
              description: 'The object sent in the POST /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} requests. An additional optional ExtensionList element has been added as part of v1.1 changes.'
              properties:
                fspId:
                  $ref: '#/paths/~1participants~1%7BType%7D~1%7BID%7D/put/requestBody/content/application~1json/schema/properties/fspId'
                currency:
                  title: Currency
                  description: 'The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.'
                  type: string
                  minLength: 3
                  maxLength: 3
                  enum:
                    - AED
                    - AFN
                    - ALL
                    - AMD
                    - ANG
                    - AOA
                    - ARS
                    - AUD
                    - AWG
                    - AZN
                    - BAM
                    - BBD
                    - BDT
                    - BGN
                    - BHD
                    - BIF
                    - BMD
                    - BND
                    - BOB
                    - BRL
                    - BSD
                    - BTN
                    - BWP
                    - BYN
                    - BZD
                    - CAD
                    - CDF
                    - CHF
                    - CLP
                    - CNY
                    - COP
                    - CRC
                    - CUC
                    - CUP
                    - CVE
                    - CZK
                    - DJF
                    - DKK
                    - DOP
                    - DZD
                    - EGP
                    - ERN
                    - ETB
                    - EUR
                    - FJD
                    - FKP
                    - GBP
                    - GEL
                    - GGP
                    - GHS
                    - GIP
                    - GMD
                    - GNF
                    - GTQ
                    - GYD
                    - HKD
                    - HNL
                    - HRK
                    - HTG
                    - HUF
                    - IDR
                    - ILS
                    - IMP
                    - INR
                    - IQD
                    - IRR
                    - ISK
                    - JEP
                    - JMD
                    - JOD
                    - JPY
                    - KES
                    - KGS
                    - KHR
                    - KMF
                    - KPW
                    - KRW
                    - KWD
                    - KYD
                    - KZT
                    - LAK
                    - LBP
                    - LKR
                    - LRD
                    - LSL
                    - LYD
                    - MAD
                    - MDL
                    - MGA
                    - MKD
                    - MMK
                    - MNT
                    - MOP
                    - MRO
                    - MUR
                    - MVR
                    - MWK
                    - MXN
                    - MYR
                    - MZN
                    - NAD
                    - NGN
                    - NIO
                    - NOK
                    - NPR
                    - NZD
                    - OMR
                    - PAB
                    - PEN
                    - PGK
                    - PHP
                    - PKR
                    - PLN
                    - PYG
                    - QAR
                    - RON
                    - RSD
                    - RUB
                    - RWF
                    - SAR
                    - SBD
                    - SCR
                    - SDG
                    - SEK
                    - SGD
                    - SHP
                    - SLL
                    - SOS
                    - SPL
                    - SRD
                    - STD
                    - SVC
                    - SYP
                    - SZL
                    - THB
                    - TJS
                    - TMT
                    - TND
                    - TOP
                    - TRY
                    - TTD
                    - TVD
                    - TWD
                    - TZS
                    - UAH
                    - UGX
                    - USD
                    - UYU
                    - UZS
                    - VEF
                    - VND
                    - VUV
                    - WST
                    - XAF
                    - XCD
                    - XDR
                    - XOF
                    - XPF
                    - YER
                    - ZAR
                    - ZMW
                    - ZWD
                extensionList:
                  title: ExtensionList
                  type: object
                  description: 'Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.'
                  properties:
                    extension:
                      type: array
                      items:
                        title: Extension
                        type: object
                        description: Data model for the complex type Extension.
                        properties:
                          key:
                            title: ExtensionKey
                            type: string
                            minLength: 1
                            maxLength: 32
                            description: Extension key.
                          value:
                            title: ExtensionValue
                            type: string
                            minLength: 1
                            maxLength: 128
                            description: Extension value.
                        required:
                          - key
                          - value
                      minItems: 1
                      maxItems: 16
                      description: Number of Extension elements.
                  required:
                    - extension
              required:
                - fspId
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    get:
      description: 'The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query string for filtering of currency. To use filtering of currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.'
      summary: Look up participant information
      tags:
        - participants
      operationId: ParticipantsByTypeAndID
      parameters:
        - $ref: '#/paths/~1consents/post/parameters/0'
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    put:
      description: 'The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party.'
      summary: Return participant information
      tags:
        - participants
      operationId: ParticipantsByTypeAndID3
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1verifications/parameters/1'
      requestBody:
        description: Participant information returned.
        required: true
        content:
          application/json:
            schema:
              title: ParticipantsTypeIDPutResponse
              type: object
              description: 'The object sent in the PUT /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} callbacks.'
              properties:
                fspId:
                  title: FspId
                  type: string
                  minLength: 1
                  maxLength: 32
                  description: FSP identifier.
      responses:
        '200':
          $ref: '#/paths/~1consents~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    delete:
      description: |-
        The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.

        **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.
      summary: Delete participant information
      tags:
        - participants
      operationId: ParticipantsByTypeAndID2
      parameters:
        - $ref: '#/paths/~1consents/post/parameters/0'
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/participants/{Type}/{ID}/error':
    put:
      description: 'If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error` (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used.'
      summary: Return participant information error
      tags:
        - participants
      operationId: ParticipantsErrorByTypeAndID
      parameters:
        - $ref: '#/paths/~1participants~1%7BType%7D~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1thirdpartyRequests~1verifications/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
      requestBody:
        description: Details of the error returned.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1consents~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'
      responses:
        '200':
          $ref: '#/paths/~1consents~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  /thirdpartyRequests/verifications:
    parameters:
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'
      - name: Content-Length
        in: header
        required: false
        schema:
          type: integer
        description: |-
          The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.

          **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
    post:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerifications
      summary: PutThirdpartyRequestsVerifications
      description: |
        The HTTP request `POST /thirdpartyRequests/verifications` is used by the DFSP to verify a third party authorization.
      parameters:
        - $ref: '#/paths/~1consents/post/parameters/0'
      requestBody:
        description: The thirdparty authorization details to verify
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsVerificationsPostRequest
              type: object
              description: The object sent in the POST /thirdpartyRequests/verifications request.
              properties:
                verificationRequestId:
                  allOf:
                    - $ref: '#/paths/~1thirdpartyRequests~1verifications/post/requestBody/content/application~1json/schema/properties/consentId/allOf/0'
                challenge:
                  type: string
                  description: Base64 encoded bytes - The challenge generated by the DFSP.
                value:
                  type: object
                  properties:
                    authenticationInfo:
                      title: AuthenticationInfo
                      type: object
                      description: Data model for the complex type AuthenticationInfo.
                      properties:
                        authentication:
                          title: AuthenticationType
                          type: string
                          enum:
                            - OTP
                            - QRCODE
                            - U2F
                          description: |-
                            Below are the allowed values for the enumeration AuthenticationType.
                            - OTP - One-time password generated by the Payer FSP.
                            - QRCODE - QR code used as One Time Password.
                            - U2F - U2F is a new addition isolated to Thirdparty stream.
                        authenticationValue:
                          title: AuthenticationValue
                          anyOf:
                            - title: OtpValue
                              type: string
                              pattern: '^\d{3,10}$'
                              description: 'The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed.'
                            - title: QRCODE
                              type: string
                              minLength: 1
                              maxLength: 64
                              description: QR code used as a One Time Password.
                            - title: U2FPinValue
                              type: object
                              description: |
                                U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.
                              properties:
                                pinValue:
                                  allOf:
                                    - title: U2FPIN
                                      type: string
                                      pattern: '^\S{1,64}$'
                                      minLength: 1
                                      maxLength: 64
                                      description: |
                                        U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.
                                  description: U2F challenge-response.
                                counter:
                                  allOf:
                                    - title: Integer
                                      type: string
                                      pattern: '^[1-9]\d*$'
                                      description: The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits.
                                  description: Sequential counter used for cloning detection. Present only for U2F authentication.
                              required:
                                - pinValue
                                - counter
                          description: Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type.
                      required:
                        - authentication
                        - authenticationValue
                    responseType:
                      title: AuthorizationResponse
                      type: string
                      enum:
                        - ENTERED
                        - REJECTED
                        - RESEND
                      description: |-
                        Below are the allowed values for the enumeration.
                        - ENTERED - Consumer entered the authentication value.
                        - REJECTED - Consumer rejected the transaction.
                        - RESEND - Consumer requested to resend the authentication value.
                      example: ENTERED
                consentId:
                  allOf:
                    - title: CorrelationId
                      type: string
                      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
                      description: 'Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).'
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  description: |
                    The id of the stored consent object that contains the credential with which to verify
                    the signed challenge against.
              required:
                - verificationRequestId
                - challenge
                - value
                - consentId
            example:
              verificationRequestId: 44444444-0000-0000-0000-000000000000
              challenge: <base64 encoded binary - the encoded challenge>
              value:
                authenticationInfo:
                  authentication: U2F
                  authenticationValue:
                    pinValue: <base64 encoded binary - the signed challenge>
                    counter: '1'
                responseType: ENTERED
              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/thirdpartyRequests/verifications/{ID}':
    parameters:
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'
      - $ref: '#/paths/~1thirdpartyRequests~1verifications/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerificationsById
      summary: PutThirdpartyRequestsVerificationsById
      description: |
        The HTTP request `PUT /thirdpartyRequests/verifications/{ID}` is used by the Auth-Service to inform
        the DFSP of a successful result in validating the verification of a Thirdparty Transaction Request.

        If the validation fails, The Auth-Service MUST use `PUT /thirdpartyRequests/verifications/{ID}/error`
        instead.
      parameters:
        - $ref: '#/paths/~1consents/post/parameters/0'
      requestBody:
        description: The result of validating the Thirdparty Transaction Request
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsVerificationsIDPutResponse
              type: object
              description: 'The object sent in the PUT /thirdpartyRequests/verifications/{ID} request.'
              properties:
                authenticationResponse:
                  type: string
                  enum:
                    - VERIFIED
                  description: The verification passed
              required:
                - authenticationResponse
            example:
              authenticationResponse: VERIFIED
      responses:
        '200':
          $ref: '#/paths/~1consents~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/thirdpartyRequests/verifications/{ID}/error':
    parameters:
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'
      - $ref: '#/paths/~1thirdpartyRequests~1verifications/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerificationsByIdAndError
      summary: PutThirdpartyRequestsVerificationsByIdAndError
      description: |
        The HTTP request `PUT /thirdpartyRequests/verifications/{ID}/error` is used by the Auth-Service to inform
        the DFSP of a failure in validating or looking up the verification of a Thirdparty Transaction Request.
      parameters:
        - $ref: '#/paths/~1consents/post/parameters/0'
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1consents~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'
      responses:
        '200':
          $ref: '#/paths/~1consents~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
