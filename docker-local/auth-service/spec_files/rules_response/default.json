[
  {
    "ruleId": 1,
    "priority": 1,
    "description": "auth-service post /consents - verify credential happy flow",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 0,
      "type": "thirdparty_pisp",
      "asynchronous": true
    },
    "conditions": {
      "all": [
        {
          "fact": "body",
          "operator": "equal",
          "value": "credential id: identifier of pair of keys, base64 encoded, min length 59",
          "path": "credential.payload.id"
        },
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/consents"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {},
        "statusCode": "202",
        "scripts": {
          "exec": [
            "const curDate = (new Date()).toUTCString();",
            "const body = JSON.parse(pm.request.body)",
            "const consentId = body.consentId",
            "const url = 'http://172.17.0.1:12000/consents/' + consentId",
            "const putConsentsIDReq = {",
            "  url,",
            "  method: 'put',",
            "  header: {",
            "    'Accept': 'application/vnd.interoperability.thirdparty+json;version=1.0',",
            "    'Content-Type': 'application/vnd.interoperability.thirdparty+json;version=1.0',",
            "    'Date': curDate,",
            "    'FSPIOP-Source': 'centralAuth',",
            "    'FSPIOP-Destination': 'dfspa'",
            "  },",
            "  body: {",
            "    mode: 'raw',",
            "    raw: JSON.stringify({",
            "      \"scopes\":[",
            "        {\"accountId\":\"dfspa.username.1234\",\"actions\":[\"accounts.getBalance\",\"accounts.transfer\"]},",
            "        {\"accountId\":\"dfspa.username.5678\",\"actions\":[\"accounts.getBalance\",\"accounts.transfer\"]}",
            "      ],",
            "      \"credential\":{",
            "        \"credentialType\":\"FIDO\",",
            "        \"status\":\"VERIFIED\",",
            "        \"payload\":{",
            "          \"id\":\"credential id: identifier of pair of keys, base64 encoded, min length 59\",",
            "          \"rawId\":\"raw credential id: identifier of pair of keys, base64 encoded, min length 59\",",
            "          \"response\":{",
            "            \"clientDataJSON\":\"clientDataJSON-must-not-have-fewer-than-121-characters Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\"attestationObject\":\"attestationObject-must-not-have-fewer-than-306-characters Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\"",
            "          },",
            "          \"type\":\"public-key\"",
            "        }",
            "      }",
            "    })",
            "  }",
            "}",
            "",
            "const participantRequest = {",
            "  url: 'http://172.17.0.1:5005/participants/CONSENT/' + consentId,",
            "  method: 'put',",
            "  header: {",
            "    'FSPIOP-Source': 'als',",
            "    'Accept': 'application/vnd.interoperability.thirdparty+json;version=1.0',",
            "    'Content-Type': 'application/vnd.interoperability.thirdparty+json;version=1.0',",
            "    'Date': curDate",
            "  },",
            "  body: {",
            "    mode: 'raw',",
            "    raw: JSON.stringify({",
            "      \"fspId\": \"centralAuth\"",
            "    })",
            "  }",
            "}",
            "",
            "",
            "pm.sendRequest(putConsentsIDReq, function (err, response) {",
            "  console.log('consent response : '+JSON.stringify(response.json()))",
            "})",
            "",
            "pm.sendRequest(participantRequest, function (err, response) {",
            "  console.log('participant response : '+JSON.stringify(response.json()))",
            "})"
          ]
        },
        "delay": 0
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 2,
    "priority": 1,
    "description": "auth-service post /consents - verify credential error flow",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 0,
      "type": "thirdparty_pisp",
      "asynchronous": true
    },
    "conditions": {
      "all": [
        {
          "fact": "body",
          "operator": "equal",
          "value": "credential id error: identifier of pair of keys, base64 encoded, min length 59",
          "path": "credential.payload.id"
        },
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/consents"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {},
        "statusCode": "202",
        "scripts": {
          "exec": [
            "",
            "const userConfig = JSON.parse(pm.globals.get('userConfig'))",
            "const curDate = (new Date()).toUTCString();",
            "const consentId = pm.request.url.path[1]",
            "const url = 'http://pisp-thirdparty-api-adapter:12000/consents/' + consentId + '/error",
            "const putConsentsErrorIDReq = {",
            "  url,",
            "  method: 'PUT',",
            "  header: {",
            "    'Accept': 'application/vnd.interoperability.thirdparty+json;version=1.0',",
            "    'Content-Type': 'application/vnd.interoperability.thirdparty+json;version=1.0',",
            "    'Date': curDate,",
            "    'FSPIOP-Source': 'centralAuth'",
            "    'FSPIOP-Destination': 'dfspa'",
            "  },",
            "  body: {",
            "    mode: 'raw',",
            "    raw: JSON.stringify({",
            "      \"errorInformation\": {",
            "        \"errorCode\": \"7213\",",
            "        \"errorDescription\": \"Consent is invalid\",",
            "        \"extensionList\": {",
            "          \"extension\": [",
            "            {",
            "              \"key\": \"test\",",
            "              \"value\": \"test\"",
            "            }",
            "          ]",
            "        }",
            "      }",
            "    })",
            "  }",
            "}",
            "  ",
            "pm.sendRequest(putConsentsErrorIDReq, function (err, resp) {",
            "  console.error('put /consents/{ID}/error response')",
            "  console.error(resp.json())",
            "  console.error(err)",
            "})"
          ]
        },
        "delay": 0
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  }
]